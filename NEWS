Changes in version 2.0-0
  o The R-based implementation of Differential Evolution has been
    replaced with a C-based implementation similar to the MS Visual C++
    v5.0 implementation accompanying the book `Differential Evolution -
    A Practical Approach to Global Optimization',downloaded from
    http://www.icsi.berkeley.edu/~storn/DeWin.zip.

    The new C implementation is significantly faster. 

  o The S3 method for plotting has been enhanced. It allows now to plot
    the intermediate populations if provided.

  o The package maintainer has been changed to Katharine Mullen,
    <katharine.mullen@nist.gov>.

  o A NAMESPACE has been added.

  o Argument FUN for DEoptim is now called fn for compatibility with optim.

  o demo file has been removed

  o CITATION file modified


Changes in version 1.3-3

  o CITATION file modified.


Changes in Version 1.3-2

  o CITATION file modified.


Changes in Version 1.3-1

  o new plotting argument 'storepop' which displays intermediate population locations.


Changes in Version 1.3-0

  o the function 'DEoptim' has two arguments: 'storepopfrom' and 'storepopfreq', for tracking intermediate
    populations; the output contains also the list 'storepop' which belongs to the 'member' list's element.

  o small bug fixed for the number of iterations.


Changes in Version 1.2-1

  o fix a bug in the optimization procedure.

  o add a demo to show how to increase the number of printed digits while performing the optimization.


Changes in Version 1.2-0

  o the function 'DEoptim' has the new argument 'initial', which is an initial or starting population.
    You can therefore introduce a starting population in the optimization procedure. This can be useful
    when the optimization has to be run many times on data sets which differ sligthly.

  o the function 'DEoptim' outputs now 'pop' in the 'member' list's element. This is the population obtained
    at the last iteration which can be used as a starting population in 'DEoptim' via the argument 'initial'.

  o the function stops if any 'NA' or 'NaN' value is returned by the function 'FUN' to be optimized.

  o the function DEoptim does not handle exponential crossover anymore. This is so to simplify and
    accelerate the optimization procedure.

  o the function 'DEoptim' outputs a list of lists. This is more natural and in the same spirit
    of usual optimization functions.

  o documentation for the 'digits'.